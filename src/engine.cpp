
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Filter__ctx_type_7_init(Filter__ctx_type_7 &_output_){
   Filter__ctx_type_7 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Filter_heun(Filter__ctx_type_7 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Filter_clipper((input + (-4.f * _ctx.p3 * res)));
   float dpt0;
   dpt0 = (fh * (wt0 + (- _ctx.p0)));
   float dpt1;
   dpt1 = (fh * (_ctx.p0 + (- _ctx.p1)));
   float dpt2;
   dpt2 = (fh * (_ctx.p1 + (- _ctx.p2)));
   float dpt3;
   dpt3 = (fh * (_ctx.p2 + (- _ctx.p3)));
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Filter_clipper((input + (-4.f * pt3 * res)));
   float dp0;
   dp0 = (fh * (w0 + (- pt0)));
   float dp1;
   dp1 = (fh * (pt0 + (- pt1)));
   float dp2;
   dp2 = (fh * (pt1 + (- pt2)));
   float dp3;
   dp3 = (fh * (pt2 + (- pt3)));
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

void Filter__ctx_type_8_init(Filter__ctx_type_8 &_output_){
   Filter__ctx_type_8 _ctx;
   Filter__ctx_type_7_init(_ctx.h);
   Filter__ctx_type_0_init(_ctx._inst2fa);
   Util__ctx_type_4_init(_ctx._inst155);
   _output_ = _ctx;
   return ;
}

float Filter_ladder(Filter__ctx_type_8 &_ctx, float input, float cut_in, float res_in){
   float res;
   res = Filter_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.0f,0.25f);
   float limit;
   if(comp > 0.0f){
      limit = (0.9f + (- comp));
   }
   else
   {
      limit = 0.9f;
   }
   float cut;
   cut = float_clip(cut_in,0.0f,limit);
   float fh;
   fh = Filter_tune(Util_smooth(_ctx._inst155,cut));
   Filter_heun(_ctx.h,input,fh,res);
   float noise;
   noise = (0.005f * Filter_simple_noise(_ctx._inst2fa));
   float out;
   out = Filter_heun(_ctx.h,(input + noise),fh,(1.1f * res));
   return out;
}

void Aurora__ctx_type_0_init(Aurora__ctx_type_0 &_output_){
   Aurora__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Aurora_soft(Aurora__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Aurora__ctx_type_1_init(Aurora__ctx_type_1 &_output_){
   Aurora__ctx_type_1 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Aurora__ctx_type_0_init(_ctx._inst560);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Aurora_lfo(Aurora__ctx_type_1 &_ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate((-0.3f + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0.0f);
   if(Util_edge(_ctx._inst351,breset)){
      _ctx.phase = 0.0f;
   }
   float tmp;
   tmp = (-1.f + _ctx.phase);
   float o;
   if(shape < 1.f){
      o = tmp;
   }
   else
   {
      if(shape < 2.f){
         o = (-1.f + (2.f * fabsf(tmp)));
      }
      else
      {
         if(tmp > 0.0f){
            o = 1.f;
         }
         else
         {
            o = 0.0f;
         }
      }
   }
   return Aurora_soft(_ctx._inst560,o);
}

void Aurora__ctx_type_2_init(Aurora__ctx_type_2 &_output_){
   Aurora__ctx_type_2 _ctx;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   _ctx.param8 = 0.0f;
   _ctx.param7 = 0.0f;
   _ctx.param6 = 0.0f;
   _ctx.param5 = 0.0f;
   _ctx.param4 = 0.0f;
   _ctx.param3 = 0.0f;
   _ctx.param2 = 0.0f;
   _ctx.param1 = 0.0f;
   Filter__ctx_type_8_init(_ctx._inst6b8);
   Filter__ctx_type_8_init(_ctx._inst5b8);
   Aurora__ctx_type_1_init(_ctx._inst496);
   Aurora__ctx_type_1_init(_ctx._inst396);
   Aurora__ctx_type_1_init(_ctx._inst296);
   Aurora__ctx_type_1_init(_ctx._inst196);
   _output_ = _ctx;
   return ;
}

void Aurora_process(Aurora__ctx_type_2 &_ctx, float in1, float in2, float in3, float in4, float in5, float in6, float in7, float in8, float fs){
   _ctx.param5;
   _ctx.param6;
   _ctx.param7;
   _ctx.param8;
   float out1;
   out1 = Aurora_lfo(_ctx._inst196,in1,0.0f,0.0f);
   float out2;
   out2 = Aurora_lfo(_ctx._inst296,_ctx.param2,0.0f,0.0f);
   float out3;
   out3 = Aurora_lfo(_ctx._inst396,_ctx.param3,0.0f,0.0f);
   float out4;
   out4 = Aurora_lfo(_ctx._inst496,_ctx.param4,0.0f,0.0f);
   float audio_l;
   audio_l = Filter_ladder(_ctx._inst5b8,in1,float_clip((_ctx.param3 + in3),0.0f,1.f),_ctx.param4);
   float audio_r;
   audio_r = Filter_ladder(_ctx._inst6b8,in2,float_clip((_ctx.param3 + in3),0.0f,1.f),_ctx.param4);
   _ctx.process_ret_0 = audio_l;
   _ctx.process_ret_1 = audio_r;
   _ctx.process_ret_2 = out1;
   _ctx.process_ret_3 = out2;
   _ctx.process_ret_4 = out3;
   _ctx.process_ret_5 = out4;
   return ;
}


