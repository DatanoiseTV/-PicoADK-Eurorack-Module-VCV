
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "engine.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Aurora__ctx_type_0_init(Aurora__ctx_type_0 &_output_){
   Aurora__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Aurora_soft(Aurora__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Aurora__ctx_type_1_init(Aurora__ctx_type_1 &_output_){
   Aurora__ctx_type_1 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Aurora__ctx_type_0_init(_ctx._inst560);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Aurora_lfo(Aurora__ctx_type_1 &_ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate((-0.3f + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0.0f);
   if(Util_edge(_ctx._inst351,breset)){
      _ctx.phase = 0.0f;
   }
   float tmp;
   tmp = (-1.f + _ctx.phase);
   float o;
   if(shape < 1.f){
      o = tmp;
   }
   else
   {
      if(shape < 2.f){
         o = (-1.f + (2.f * fabsf(tmp)));
      }
      else
      {
         if(tmp > 0.0f){
            o = 1.f;
         }
         else
         {
            o = 0.0f;
         }
      }
   }
   return Aurora_soft(_ctx._inst560,o);
}

void Aurora__ctx_type_2_init(Aurora__ctx_type_2 &_output_){
   Aurora__ctx_type_2 _ctx;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   _ctx.param8 = 0.0f;
   _ctx.param7 = 0.0f;
   _ctx.param6 = 0.0f;
   _ctx.param5 = 0.0f;
   _ctx.param4 = 0.0f;
   _ctx.param3 = 0.0f;
   _ctx.param2 = 0.0f;
   _ctx.param1 = 0.0f;
   Aurora__ctx_type_1_init(_ctx._inst696);
   Aurora__ctx_type_1_init(_ctx._inst596);
   Aurora__ctx_type_1_init(_ctx._inst496);
   Aurora__ctx_type_1_init(_ctx._inst396);
   Aurora__ctx_type_1_init(_ctx._inst296);
   Aurora__ctx_type_1_init(_ctx._inst196);
   _output_ = _ctx;
   return ;
}

void Aurora_process(Aurora__ctx_type_2 &_ctx, float in1, float in2, float in3, float in4, float in5, float in6, float in7, float in8, float fs){
   _ctx.param5;
   _ctx.param6;
   _ctx.param7;
   _ctx.param8;
   float out1;
   out1 = Aurora_lfo(_ctx._inst196,in1,0.0f,0.0f);
   float out2;
   out2 = Aurora_lfo(_ctx._inst296,_ctx.param2,0.0f,0.0f);
   float out3;
   out3 = Aurora_lfo(_ctx._inst396,_ctx.param3,0.0f,0.0f);
   float out4;
   out4 = Aurora_lfo(_ctx._inst496,_ctx.param4,0.0f,0.0f);
   float audio_l;
   audio_l = Aurora_lfo(_ctx._inst596,_ctx.param1,0.0f,0.0f);
   float audio_r;
   audio_r = Aurora_lfo(_ctx._inst696,_ctx.param2,0.0f,0.0f);
   _ctx.process_ret_0 = audio_l;
   _ctx.process_ret_1 = audio_r;
   _ctx.process_ret_2 = out1;
   _ctx.process_ret_3 = out2;
   _ctx.process_ret_4 = out3;
   _ctx.process_ret_5 = out4;
   return ;
}


