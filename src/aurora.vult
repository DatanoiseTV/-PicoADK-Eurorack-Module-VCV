

fun soft(x1) {
   mem x2,x3,x4;
   val o = (x1+x2+x3+x4)/4.0;
   x2,x3,x4 = x1,x2,x3;
   return o;
}

fun lfo(cv, shape, reset) {
   mem rate;
   if(Util.change(cv))
      rate = Util.cvToRate(cv-0.3);
   mem phase = phase + rate;
   phase = if phase > 2.0 then phase - 2.0 else phase;
   val breset = reset > 0.0;
   if(Util.edge(breset))
      phase = 0.0;
   val tmp = phase - 1.0;
   val o =
      if shape < 1.0 then tmp
      else if shape < 2.0 then
         (abs(tmp) * 2.0 - 1.0)
      else
         (if tmp > 0.0 then 1.0 else 0.0);
   return soft(o);
}

fun process(in1:real, in2:real, in3:real, in4:real, in5:real, in6:real, in7:real, in8:real, fs:real) {
   mem param1, param2, param3, param4, param5, param6, param7, param8;

   _ = param5;
   _ = param6;
   _ = param7;
   _ = param8;

   val out1 = lfo(in1, 0.0, 0.0);
   val out2 = lfo(param2, 0.0, 0.0);
   val out3 = lfo(param3, 0.0, 0.0);
   val out4 = lfo(param4, 0.0, 0.0);

   // val audio_l = Filter.ladder(in1, param3, param4);
   val audio_l = Filter.ladder(in1, Util.clip(param3+in3, 0.0, 1.0), param4);
   val audio_r = Filter.ladder(in2, Util.clip(param3+in3, 0.0, 1.0), param4);

   return audio_l, audio_r, out1, out2, out3, out4;
}
and setParam1(knob) {
   param1 = clip(knob, 0.0, 1.0);
}
and setParam2(knob) {
   param2 = clip(knob, 0.0, 1.0);
}
and setParam3(knob) {
   param3 = clip(knob, 0.0, 1.0);
}
and setParam4(knob) {
   param4 = clip(knob, 0.0, 1.0);
}

and setParam5(knob) {
   param5 = clip(knob, 0.0, 1.0);
}

and setParam6(knob) {
   param6 = clip(knob, 0.0, 1.0);
}

and setParam7(knob) {
   param7 = clip(knob, 0.0, 1.0);
}

and setParam8(knob) {
   param8 = clip(knob, 0.0, 1.0);
}